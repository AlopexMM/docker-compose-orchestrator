#!/usr/bin/env bash

# Debe verificar que docker este funcionando en caso de que no informa que no se lo encuentra y se termina el programa
# Tiene que buscar si existe el archivo env si no lo tiene consulta las
# caracteristicas del proyecto y crea uno por defecto

DOCKER_ORCHESTRATOR="${HOME}/docker-orchestrator"
source "${DOCKER_ORCHESTRATOR}/lib"
VARIABLES_ENTORNO="${PWD}/.variables_entorno"
OLD_DOCKER_COMPOSE=0

function help_docker-orchestrator(){
    echo "La funciones que actualmente posee docker-orchestrator.manager son:"
    echo ""
    echo -e "${WHITE}up${NC}:\n\tCon este comando tomara los datos de .variables_entorno\n\ty levantara el entorno configurado en ${WHITE}docker-compose.yml${NC}\n\tPor ejemplo:\n\t\t${WHITE}docker-orchestrator.manager up${NC}\n\t\t${WHITE}docker-orchestrator.manager up -d${NC} no muestra el proceso de creacion del entorno y libera la consola para poder seguir usandola\n"
    echo -e "${WHITE}down${NC}:\n\tCon este comando tomara los datos de .variables_entorno\n\ty dara de baja el entorno configurado en ${WHITE}docker-compose.yml${NC}\n\tPor ejemplo:\n\t\t${WHITE}docker-orchestrator.manager down${NC}\n"
    echo -e "${WHITE}ps${NC}:\n\tCon este comando tomara los datos de .variables_entorno\n\ty mostrara la informacion del entorno configurado en ${WHITE}docker-compose.yml${NC} que esta corriendo\n\tPor ejemplo:\n\t\t${WHITE}docker-orchestrator.manager ps${NC}\n"
    echo -e "${WHITE}logs${NC}:\n\tCon este comando tomara los datos de .variables_entorno\n\ty el log del entorno que se encuentra corriendo con esos valores\n\tPor ejemplo:\n\t\t${WHITE}docker-orchestrator.manager logs${NC}\n"
    echo -e "${WHITE}clean${NC}:\n\tCon este comando se eliminaran todas los containers e imagenes del equipo\n\tPor ejemplo:\n\t\t${WHITE}docker-orchestrator.manager clean${NC}\n"
}

function export_variable(){
    while IFS= read line
    do
        export ${line}
    done < ${VARIABLES_ENTORNO}
}

docker_status

case $1 in
    "up")
        # Exportamos las variables de entorno
        #export_variable
        # Comprueba que no este funcionando un entorno ya
        export_variable
        if docker-compose --env-file "${VARIABLES_ENTORNO}" ps | grep ${PROJECT_NAME} | grep 'Exit'; then
            echo -e "${WHITE}Apagando viejos entornos${NC}"
            docker-compose --env-file "${VARIABLES_ENTORNO}" down > /dev/null 2>&1
            OLD_DOCKER_COMPOSE=1
        fi

        if [[ ${OLD_DOCKER_COMPOSE} == 1 ]]; then
            docker-compose --env-file "${VARIABLES_ENTORNO}" build
        fi

        if [[ $2 != "" ]]; then
            docker-compose --env-file "${VARIABLES_ENTORNO}" up $2
            docker-compose --env-file "${VARIABLES_ENTORNO}" ps
            # Mostramos las variables de entorno que se van a utilizar
            echo -e "${WHITE}+++++++++++++++++++++++++++++++${NC}\n"
            cat "${VARIABLES_ENTORNO}"
            echo ""
            echo -e "${WHITE}+++++++++++++++++++++++++++++++${NC}\n"
        else
            docker-compose --env-file "${VARIABLES_ENTORNO}" up
        fi
        ;;
    "down")
        docker-compose --env-file "${VARIABLES_ENTORNO}" down
        ;;
    "ps")
        docker-compose --env-file "${VARIABLES_ENTORNO}" ps
        ;;
    "logs")
        docker-compose --env-file "${VARIABLES_ENTORNO}" logs
        ;;
    "clean")
        docker rm $(docker ps -qa) 2> /dev/null
        docker rmi $(docker images -q) 2> /dev/null
        clear
        echo "Finalizo la limpieza"
        ;;
    "help"|*)
        help_docker-orchestrator
        ;;
esac
